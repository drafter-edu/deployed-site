# Simple workflow for deploying static content to GitHub Pages
name: Deploy main branch as website

on:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    deploy:
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        runs-on: ubuntu-latest
        timeout-minutes: 2
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Install uv
              uses: astral-sh/setup-uv@v6
              with:
                  enable-cache: true
                  activate-environment: true
            - uses: actions/setup-python@v5
              name: Install Python
              with:
                  python-version: "3.10"
            - id: get-repo-values
              name: Get repository name
              run: |
                  url=https://$(echo "${{github.repository}}" | sed "s/\//.github.io\//")
                  echo "url=$url" >> $GITHUB_OUTPUT
            # Create the dist/ directory
            - name: Create dist directory
              run: |
                  mkdir -p dist
            # Create an _ERRORS.txt file and _WARNINGS.txt file to keep track of any errors or warnings that we want to show on the dashboard
            - name: Create _ERRORS.txt and _WARNINGS.txt
              run: |
                  touch ./dist/_ERRORS.txt
                  touch ./dist/_WARNINGS.txt
            # Keep track of the build process in a log file that we eventually dump
            - name: Create Log File
              id: create_log
              run: |
                  echo "Starting Drafter deployment at $(date)" |& tee ./dist/_build_log.txt
                  echo "Repository: ${{ github.repository }}" |& tee -a ./dist/_build_log.txt
                  echo "Run ID: ${{ github.run_id }}" |& tee -a ./dist/_build_log.txt
                  echo "Job: ${{ github.job }}" |& tee -a ./dist/_build_log.txt
                  echo "Full log available at:" |& tee -a ./dist/_build_log.txt
                  : # https://stackoverflow.com/a/76681922/1718155
                  echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" |& tee -a ./dist/_build_log.txt
                  echo "" >> ./dist/_build_log.txt
            # Create the dashboard, for quick links and debug information
            - name: Setup Dashboard
              id: setup_dashboard
              run: |
                  mkdir -p docs
                  printf '## Quick Links\n\nHere are quick links for your deployed site! The build log is at the bottom.\n\n' > docs/dashboard.md

                  : # Create a redirect to the dashboard from quick/ and dashboard/
                  echo "<html><head>\
                  <meta http-equiv='refresh' content='0; URL=docs/dashboard' />\
                  </head><body>Redirecting to dashboard</body></html>" > ./dist/dashboard.html
                  cp ./dist/dashboard.html ./dist/quick.html

                  : # Add a link to the deployed site and this dashboard
                  echo "* [Deployed Site](../): Your actual Drafter website." >> docs/dashboard.md
                  echo "* [Dashboard](./dashboard.html): This current page." >> docs/dashboard.md
                  echo "* [Deployment Log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}): The official deployment logs on GitHub, with full details on any deployment issues." >> docs/dashboard.md

                  printf 'Successfully created dashboard file\n' >> ./dist/_build_log.txt
            - name: Install dependencies
              id: dependencies
              run: |
                  echo "<html><body><pre>" > ./dist/installation.html
                  uv pip install coverage drafter bakery pylint mypy matplotlib pillow coverage 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/installation.html
                  : # Install students' requirements.txt file if it is present
                  if [ -f requirements.txt ]; then
                      uv pip install -r requirements.txt 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/installation.html
                  fi
                  echo "</pre></body></html>" >> ./dist/installation.html
                  echo '* [Installation](../installation.html): Installation details from when we deployed your website, and we installed required python packages. If you had a custom `requirements.txt` file, then this will have some useful details.' >> docs/dashboard.md

                  printf 'Successfully installed dependencies\n' >> ./dist/_build_log.txt
            # Create redirects to the actual github repository
            - name: Create Github Repo Redirect and Link
              id: create_redirects
              run: |
                  : # Create a redirect to the github repository
                  echo "<html><head>\
                  <meta http-equiv='refresh' content='0; URL=${{github.server_url}}/${{github.repository}}' />\
                  </head><body>Redirecting to repository</body></html>" > ./dist/repo.html

                  : # Add the redirect to the dashboard
                  echo "* [GitHub Repository](../repo.html): Jump to the GitHub repository with your source code." >> docs/dashboard.md

                  printf 'Successfully created redirect to repository\n' >> ./dist/_build_log.txt

            # Sanity checks
            - name: Main File Exists
              id: structural_checks
              # TODO: Make this accept a wider range of "main.py" filenames, and output the actual filename as a variable for later steps.
              run: |
                  : # Make sure that there is a main.py file
                  if [ ! -f main.py ]; then
                      echo "Missing main.py file" |& tee -a ./dist/_build_log.txt |& tee "./dist/_ERRORS.txt"
                      exit 1
                  fi
                  : # Make sure that they updated the main.py file with their version, based on the md5sum: c6cdb475fd65d116483482315dc9b8ef
                  if [ "$(md5sum main.py | cut -d' ' -f1)" == "c6cdb475fd65d116483482315dc9b8ef" ]; then
                      echo "Error during build! You need to update the main.py file with your own code" |& tee -a ./dist/_build_log.txt |& tee "./dist/_ERRORS.txt"
                      exit 1
                  fi

                  printf 'Successfully passed structural checks\n' >> ./dist/_build_log.txt
            # Compile their site into JS
            - name: Compile Site
              id: compile_site
              run: |
                  echo "<html><body><pre>" > ./dist/compile.html
                  : # Copy over all the students' files in the website directory
                  rsync -av --exclude='__pycache__' --exclude='.DS_Store' --exclude='./dist/' --exclude='.*' ./ ./dist/
                  : # TODO: Need to get a list of all their output files and pass them into the --additional-files argument
                  : # TODO: Need to handle get all the links we build, and pass them into the --external-pages argument
                  : # Create a JS file to hold all their code
                  uv run drafter ./dist/main.py --output-directory ./dist/ --warn-missing-info --create-404 if_missing 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/compile.html ./dist/_build_log.txt

                  echo "</pre></body></html>" >> ./dist/compile.html
                  echo "* [Compile Files](../compile.html): Compilation details from when we bundled up your website. You probably don't need to worry about this, unless there was an error during deployment." >> docs/dashboard.md

                  printf 'Successfully compiled site into JS\n' >> ./dist/_build_log.txt
            - name: Run tests and output code coverage
              id: tests
              run: |
                  echo "<html><body><pre>" > ./dist/tests.html
                  DRAFTER_SKIP=true coverage run main.py 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/_build_log.txt ./dist/tests.html
                  coverage html -d ./dist/coverage 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/_build_log.txt ./dist/tests.html
                  echo "</pre></body></html>" >> ./dist/tests.html
                  echo '* [Raw Test Output](../tests.html): The results of running your test cases, if any.' >> docs/dashboard.md
                  echo "* [Coverage Report](../coverage/index.html): The code coverage report from your tests (an HTML document showing the lines of code that were actually executed by your tests). More coverage is usually better, but full coverage does not mean that your application has no bugs!" >> docs/dashboard.md

                  printf 'Successfully ran tests and output code coverage\n' >> ./dist/_build_log.txt
            - name: Run linter
              id: lint
              continue-on-error: true
              run: |
                  echo "<html><body><pre>" > ./dist/lint.html
                  pylint *.py --exit-zero 2> >(tee ./dist/_ERRORS.txt) |& tee -a ./dist/_build_log.txt ./dist/lint.html
                  echo "</pre></body></html>" >> ./dist/lint.html
                  echo '* [Lint](../lint.html): The results of running a *linter* (`PyLint`) on your code. A linter will report stylistic issues with your code. Improving them might make your code easier to read. Some of the linter suggestions will be outside the scope of this course, but it can be helpful to look at what a professional tool suggests.' >> docs/dashboard.md

                  printf 'Successfully ran linter\n' >> ./dist/_build_log.txt
            - name: Run type checker
              id: typecheck
              continue-on-error: true
              run: |
                  echo "<html><body><pre>" > ./dist/type.html
                  : # If there is no mypy.ini file, then create one with default settings to ignore Bakery
                  if [ ! -f mypy.ini ]; then
                      echo '[mypy]' > mypy.ini
                      echo '[mypy-bakery.*]' >> mypy.ini
                      echo 'ignore_missing_imports = True' >> mypy.ini
                  fi
                  : # Not yet comfortable with mypy, so running it in a continue-on-error mode and not failing the build
                  mypy main.py |& tee -a ./dist/_build_log.txt ./dist/type.html
                  echo "</pre></body></html>" >> ./dist/type.html
                  echo '* [Type](../type.html): The results of running a *typechecker* (`MyPy`) on your code. This is a sophisticated piece of software that can identify type issues. However, you should take it with a grain of salt, since it may raise issues that are outside of the scope of this course. ' >> docs/dashboard.md

                  printf 'Successfully ran type checker\n' >> ./dist/_build_log.txt
            - name: Create integrity report
              if: ${{ !cancelled() }}
              id: integrity
              run: |
                  echo "<html><body><p>These are the current MD5 Hashsums for the build files. We can check these to ensure that you haven't broken any core build files. You probably don't need to worry about this.</p><pre>" > ./dist/integrity.html
                  echo "MD5 Hashsums for the build files:" >> ./dist/_build_log.txt
                  md5sum .github/workflows/deploy.yml | tee -a ./dist/integrity.html ./dist/_build_log.txt
                  echo "</pre></body></html>" >> ./dist/integrity.html
                  echo '* [File Integrity Checks](../integrity.html): The MD5 Hashsums for some of the build files used during deployment. If changes were made to these files, then the values will be different than expected. This is only useful information for your instructor to look at when debugging issues with your deployment.' >> docs/dashboard.md

                  printf 'Successfully created integrity report\n' >> ./dist/_build_log.txt
            - name: Create GitInspector Report
              if: ${{ !cancelled() }}
              id: gitinspector
              run: |
                  git clone https://github.com/jpwhite3/gitinspector.git
                  python ./gitinspector/gitinspector.py ./ --grading --format=html -f tsx,ts,html,css,py,md -x ./gitinspector -x ./dist/ -x ./tools/ > ./dist/git.html
                  echo '* [Git Inspector Report](../git.html): A record of the commits and work done by all the contributors to this repository. This can help demonstrate that you did the work when you said you did.' >> docs/dashboard.md

                  printf 'Successfully created GitInspector report\n' >> ./dist/_build_log.txt
            - name: Copy commit logs with messages
              if: ${{ !cancelled() }}
              id: commit_logs
              run: |
                  echo "<html><body><pre>" > ./dist/commits.html
                  echo "Last 50 commits with messages:" >> ./dist/_build_log.txt
                  git log --oneline --decorate --graph --all -n 50 | tee -a ./dist/commits.html ./dist/_build_log.txt
                  echo "</pre></body></html>" >> ./dist/commits.html
                  echo '* [Commit Messages](../commits.html): The last 50 commit messages logged for this repository. Make sure you are writing good commit messages!' >> docs/dashboard.md

                  printf 'Successfully copied commit logs with messages\n' >> ./dist/_build_log.txt
            # If there were errors or warnings, then prepend them to the dashboard
            - name: Show errors and warnings in dashboard
              id: show_errors_warnings
              if: ${{ !cancelled() }}
              run: |
                  : # If the ./dist/_ERRORS.txt file is not empty, then prepend it to the dashboard
                  if [ -s ./dist/_ERRORS.txt ]; then
                      touch ./dist/_ERRORS_HEADER.md
                      printf '# Dashboard\n\n## Error During Build!\n\n!!! failure\n    There was an error during your build. Details are below:\n\n```' > ./dist/_ERRORS_HEADER.md
                      printf '```\n' >> ./dist/_ERRORS.txt
                      cat ./dist/_ERRORS_HEADER.md ./dist/_ERRORS.txt ./docs/dashboard.md > ./dist/tmp.md
                      mv ./dist/tmp.md ./docs/dashboard.md
                      printf 'Errors found during build. They were prepended to dashboard.\n' >> ./dist/_build_log.txt
                  else
                    : # If the ./dist/_WARNINGS.txt file is not empty, then prepend it to the dashboard
                    if [ -s ./dist/_WARNINGS.txt ]; then
                        touch ./dist/_WARNINGS_HEADER.md
                        printf '# Dashboard\n\n## Warning During Build!\n\n!!! warning\n    There was one or more warnings during your build. Details are below:\n\n```' > ./dist/_WARNINGS_HEADER.md
                        printf '```\n' >> ./dist/_WARNINGS.txt
                        cat ./dist/_WARNINGS_HEADER.md ./dist/_WARNINGS.txt ./docs/dashboard.md > ./dist/tmp.md
                        mv ./dist/tmp.md ./docs/dashboard.md
                        printf 'Warnings found during build. They were prepended to dashboard.\n' >> ./dist/_build_log.txt
                    else
                        : # Need to prepend '# Dashboard' to the dashboard file if there are no errors or warnings
                        printf '# Dashboard\n' > ./dist/tmp.md
                        cat ./dist/tmp.md ./docs/dashboard.md > ./dist/tmp2.md
                        mv ./dist/tmp2.md ./docs/dashboard.md
                        printf 'No major errors or warnings found during build.\n' >> ./dist/_build_log.txt
                    fi
                  fi
            - name: Add build log at the end of the dashboard
              id: add_build_log
              if: ${{ !cancelled() }}
              run: |
                  printf '\n## Build Log\n' >> ./docs/dashboard.md
                  echo '```' >> ./docs/dashboard.md
                  cat ./dist/_build_log.txt >> ./docs/dashboard.md
                  echo '```' >> ./docs/dashboard.md
                  printf 'Build log added to dashboard.Preparing to generate final HTML and deploy!' >> ./docs/dashboard.md
            # Finish deployment by uploading artifacts
            - name: Setup Pages
              uses: actions/configure-pages@v3
              if: ${{ !cancelled() }}
            - name: Upload artifact
              uses: actions/upload-pages-artifact@main
              if: ${{ !cancelled() }}
              with:
                  # Upload entire repository
                  path: "dist/"
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
              if: ${{ !cancelled() }}
